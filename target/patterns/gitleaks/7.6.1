# Global Allowlist Rules

[allowlist]
  description = "Global Allowlist"
  regexes = [
    # Use notsecret as the standard allow tag.
    # It must begin at the start of the line, comment chars, or a space
    # It must end at the end of the line or with a space
    '''(^|\#|\/\/|\s)notsecret(\s|$)''',
    # Mimic the behavior of newer gitleaks versions
    # https://github.com/zricethezav/gitleaks/blob/96eed6aa0f507fe0c21bb46bec32637dc4cb1a9f/detect/detect.go#L226
    '''gitleaks:allow''',
  ]
  paths = [
    '''Godeps''',
    '''gems\/''',
    '''node_modules''',
    '''vendor''',
    # Quickstarts are FP heavy
    '''quickstart''',
    # Handle a lot of the github/docs cases
    '''lib\/rest\/static\/.+\/((.+)?github.+\.json|ghes.+\.json)''',
    # Ignore checked-in python packages
    '''lib\/python[^\/]+\/site-packages''',
    # Common extensions to ignore
    '''(.*?)(png|jpg|gif|doc|docx|pdf|bin|xls|pyc|zip|css)$''',
    # Ignore go mod files
    '''(^|\/)(go.mod|go.sum)$''',
    # Ignore gitleaks related stuff
    '''(^|\/).?gitleaks''',
    # Ignore aws secrets check baseline file
    '''(^|\/)\.?secrets.baseline$''',
  ]

# Genearal Potential Leak Patterns

[[rules]]
  description="ArgoCD JWT"
  # Based on shifted b64 encoded portions of '"iss":"argocd"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(ImlzcyI6ImFyZ29jZC|Jpc3MiOiJhcmdvY2Qi|iaXNzIjoiYXJnb2NkI)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  # TODO: add alert:repo-owner tag when the reporter supports handling really
  # large numbers in a single scan (so emails aren't crazy).
  tags = ["argocd", "jwt", "type:secret"]

[[rules]]
  description = "Asymmetric Private Key"
  regex = '''-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----'''
  tags = ["alert:repo-owner", "key", "asymmetric-private-key", "type:secret"]

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
      # Ignore keys in a test(s) folder
      '''test(s)?\/.*.(txt|der|key|pem)$''',
      # Ignore keys with test in their name
      '''[^\/]+test[^\/]+(txt|der|key|pem)$''',
      # Ignore common example keys
      '''(dummy|example).*(key|pem)''',
      # Ignore ssh utilities that might have key headers in them
      '''\/(s)?bin\/ssh(-add|-agent|-autoproxy|-copy-id|-keygen|-keyscan|-sign-request|d)?$''',
      # Ignore libs that might have key headers in them
      '''\/lib\w+\/lib(gnutls|ssh).so''',
      # Ignore utils that might have key headers in them
      '''\/lib\w+\/(cockpit-|openssh\/ssh-)''',
      # Data dirs that contain key headers to identify them
      '''\/usr\/share\/(mime|misc)''',
    ]

    regexes = [
      # Anything less than 15 characters
      '''PRIVATE KEY( BLOCK)?-----.{0,15}-----END''',
      # The key has spaces in it so it's probably a placeholder
      '''PRIVATE KEY( BLOCK)?-----.*?(\s).*?-----END''',
      # The key has a redacted portion
      '''PRIVATE KEY( BLOCK)?-----.*?(\.\.\.|\*\*\*).*?-----END''',
      # Ignore some keys assigned to test vars
      # e.g. TEST_SERVER_KEY = """-----BEGIN RSA PRIVATE KEY-----
      '''(?i)\w*(fake|example|test)\w*(\s+)?[:=]+(\s+)?(\[)?(\s+)?(\"\"\"|\"|\'|`)?-----BEGIN''',
      # Things that look like code looking for headers
      #   like: if (privateKey === "-----BEGIN RSA PRIVATE KEY-----") {
      '''if.*==\s*[\"|\']-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----[\"|\']''',
      #   like: "-----BEGIN RSA PRIVATE KEY-----")
      '''-----BEGIN ((EC|PGP|DSA|RSA|OPENSSH) )?PRIVATE KEY( BLOCK)?-----[\"\']\)''',
    ]

[[rules]]
  description = "AWS IAM Unique Identifier"
  # Assumes there's at least one non uppercase letter or number before the key
  # to help avoid thinking things in the middle of hashes are keys.
  regex = '''[^A-Z0-9\/](A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)([A-Z0-9]{16})'''
  tags = ["alert:repo-owner", "key", "aws", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ingore example keys
      '''EXAMPLE''',
      # Ingore sample keys (range limit added to ensure the key has some
      # proximity to "sample:")
      '''(S|s)ample:.{0,1000}(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)''',
      # Ignore presigned URLs
      '''X-Amz-Signature''',
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "2"

[[rules]]
  description = "AWS MWS Key"
  regex = '''amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
  tags = ["alert:repo-owner", "key", "aws", "mws", "type:secret"]

[[rules]]
  description = "AWS Secret Key"
  regex = '''(?i)aws([^:=(,\/\s]{0,20})?(\s+)?[:=(](\s+)?(?-i)['\"]?([A-Za-z0-9\/+]{40})['\"]?'''
  tags = ["alert:repo-owner", "key", "aws", "type:secret"]

  [rules.allowlist]
    regexes = [
      '''arn:aws:iam:''',
      # Ignore common placeholders
      '''(?i)aws([^:=(,\/\s]{0,20})?(\s+)?[:=(](\s+)?['\"]?.*(example|abcdef|get|name|serv|spec|profile|role|resource|test|curl|cont|conf|cert).*['\"]?''',
      # Ignore EXAMPLE base64 encoded
      '''(?i)aws([^:=(,\/\s]{0,20})?(\s+)?[:=(](\s+)?['\"]?.*(?-i)(RVhBTVBMR|VYQU1QTEU|FWEFNUExF).*['\"]?''',
    ]

  [[rules.entropies]]
    Min = "4"
    Max = "8"
    Group = "4"

[[rules]]
  description = "Container Registry Authentication"
  # Example match: registry.New("registry", "username", "password")
  regex = '''registry\.New\((\s+)?\"[^\"]+\",(\s+)?\"[^\"]+\",(\s+)?(\"[^\"]+\")(\s+)?\)'''
  tags = ["alert:repo-owner", "key", "container-registry", "type:secret"]

  [[rules.entropies]]
    Min = "0"
    Max = "8"
    Group = "4"

[[rules]]
  description = "URL User and Password"
  regex = ''':\/\/([^:\/\s\"\']+)?:([^@\/\s\"]{3,})@[\w\.\-]+'''
  tags = ["alert:repo-owner", "password", "basic-auth", "type:secret"]

  [[rules.entropies]]
    Min = "2.4"
    Max = "8"
    Group = "2"

  [rules.allowlist]
    paths = [
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]
    regexes = [
      # Things like: https://user:__pass__@host
      # Things like: https://user:%pass%@host
      # Things like: https://user:<pass>@host
      '''(?i):\/\/([^:\/\s\"\']+)?:(__[^@\/\s]+__|%[^@\/\s]+%|(\[)?(_)?<[^@\/\s]+>(_)?(\])?)@[\w\.\-]+''',
      # Things like: https://user:&lt;pass&gt;@host (HTML for <pass>)
      '''(?i):\/\/([^:\/\s\"\']+)?:&lt;[^@\/\s]+&gt;@[\w\.\-]+''',
      # Things like: https://user:$pass$@host
      # Things like: https://user:$pass@host
      '''(?i):\/\/([^:\/\s\"\']+)?:\$[a-z][a-z\_\-]+(\$)?@[\w\.\-]+''',
      # Things like: https://user:afacae....adsfae@host
      ''':\/\/([^:\/\s\"\']+)?:[^@\/\s\"]*(\.\.\.|\*\*\*)[^@\/\s\"]*@[\w\.\-]+''',
      # Things like: https://user:${pass}@host
      '''(?i):\/\/([^:\/\s\"\']+)?:(\")?\$\{[^@\/\s]+\}(\")?@[\w\.\-]+''',
      # Things like: https://user:{pass}@host
      '''(?i):\/\/([^:\/\s\"\']+)?:\{[^@\/\s]+\}@[\w\.\-]+''',
      # Things like: https://user:[pass]@host
      '''(?i):\/\/([^:\/\s\"\']+)?:\[[^@\/\s]+\]@[\w\.\-]+''',
      # Things like: https://user:${pass}@host
      # Things like: https://user:\${pass}@host
      '''(?i):\/\/([^:\/\s\"\']+)?:(\\)?\$\{[^@\/\s]+\}@[\w\.\-]+''',
      # Things like: https://user:$(pass)@host
      '''(?i):\/\/([^:\/\s\"\']+)?:\$\([^@\/\s]+\)@[\w\.\-]+''',
      # Things like: https://user:#{pass}@host
      '''(?i):\/\/([^:\/\s\"\']+)?:\#\{[^@\/\s]+\}@[\w\.\-]+''',
      # Things like: https://user:$SOME_ENV_VARIABLE-optional-text@host
      '''(?i):\/\/([^:\/\s\"\']+)?:(?-i)(")?\$[A-Z][0-9A-Z_]{4,}([\w\-]+)?(")?@[\w\.\-]+''',
      # Things like: https://host:port,org.java.stuff@commit
      ''':\/\/([^:\/\s\"\']+)?:\d{3,4},[\w\.]+@[\w\.\-]+''',
      # *Example.Com
      ''':\/\/([^:\/\s\"\']+)?:([^@\/\s\"]{3,})@[\w\-\.]*example.com''',
      # ip:port type placeholders
      ''':\/\/([^:\/\s\"\']+)?:([^@\/\s\"]{3,})@(ip|host):port''',
      # Common spammy placeholder creds
      '''(?i):\/\/([^:\/\s\"\']+)?:(candlepin|default|keylime|rabbitmq|pbench|postgres|prisma|gitops|telemetry|x-oath-basic|redhat)@[\w\.\-]+''',
      # Various words at the start and end that signify a placeholder
      '''(?i):\/\/([^:\/\s\"\']+)?:(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?@[\w\.\-]+''',
      '''(?i):\/\/([^:\/\s\"\']+)?:.+?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-oauth-basic|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?(key)?|string|test|token|uuid|value|xxxxx|y(a)?ml)@[\w\.\-]+''',
    ]

[[rules]]
  description = "Dynatrace Token"
  regex = '''dt0[a-zA-Z]{1}[0-9]{2}\.[A-Z0-9]{24}\.[A-Z0-9]{64}'''
  tags = ["alert:repo-owner", "key", "dynatrace", "type:secret"]

[[rules]]
  description = "Facebook Secret Key"
  regex = '''(?i)(facebook)([0-9A-Za-z_-]{0,20})?(\s+)?[:|=|(](\s+)?(?-i)['\"]?[0-9a-f]{32}['\"]?'''
  tags = ["alert:repo-owner", "key", "facebook", "type:secret"]

[[rules]]
  description = "Google API Key"
  regex = '''AIza[0-9A-Za-z\\-_]{35}([^0-9A-Za-z\\-_]|$)'''
  tags = ["alert:repo-owner", "key", "google", "type:secret"]

[[rules]]
  description = "Heroku API Key"
  regex = '''(?i)heroku(.{0,20})?[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'''
  tags = ["alert:repo-owner", "key", "heroku", "type:secret"]

[[rules]]
  description = "Htpasswd File"
  file = '''htpasswd'''
  regex = '''.+?:([^\s]+)'''
  tags = ["alert:repo-owner", "key", "password", "general", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore comments
      '''^(\s+)?#''',
    ]
    files = [
      # Ignore these file extensions with htpasswd in the name
      '''(.+?)\.(c|go|java|js(\.map)?|html|md|py|rb|sh|yml|yaml)$''',
    ]

  [[rules.entropies]]
    Min = "4"
    Max = "8"
    Group = "1"

[[rules]]
  description="Kubernetes Service Account JWT"
  # Based on shifted b64 encoded portions of '"iss":"kubernetes/serviceaccount"'
  regex = '''[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+(ImlzcyI6Imt1YmVybmV0ZXMvc2VydmljZWFjY291bn|Jpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50|iaXNzIjoia3ViZXJuZXRlcy9zZXJ2aWNlYWNjb3Vud)[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+'''
  # TODO: add alert:repo-owner tag when the reporter supports handling really
  # large numbers in a single scan (so emails aren't crazy).
  tags = ["kubernetes", "service-account", "jwt", "type:secret"]

[[rules]]
  description = "MailChimp API Key"
  regex = '''(?i)(mailchimp|mc)(.{0,20})?[0-9a-f]{32}-us[0-9]{1,2}'''
  tags = ["alert:repo-owner", "key", "mailchimp", "type:secret"]

[[rules]]
  description = "Mailgun API Key"
  regex = '''((?i)(mailgun|mg)(.{0,20})?)key-[0-9a-z]{32}'''
  tags = ["alert:repo-owner", "key", "mailgun", "type:secret"]

[[rules]]
  description = "General Secret"
  # Things like:
  #   password = "value"
  #   password_key = "value"
  #   password-key = "value"
  #   secret = "value"
  #   secret = 'value'
  #   secret_key = "value"
  #   secret-key = "value"
  #   secretkey = "value"
  #   ...
  regex = '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']'''
  tags = ["alert:repo-owner", "key", "general", "secret", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "6"

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]

    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#(\s+)?nosec(\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/(\s+)?nolint:gosec(\s+|$)''',
      #   secret = "_PLACEHOLDER_"
      #   secret = "<PLACEHOLDER>"
      #   secret = "@@PLACEHOLDER@@"
      #   secret = ").append("foo")
      #   secret = "%PLACEHOLDER%"
      #   secret = "$PLACEHOLDER$"
      #   secret = "`PLACEHOLDER`"
      #   secret = "[PLACEHOLDER]"
      #   secret = "[%PLACEHOLDER%]"
      #   secret = "$(PLACEHOLDER..."
      #   secret = "\$(PLACEHOLDER..."
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](_.+?_|<.+?>|@@.+?@@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|(\\)?\$\(.*)[\"\']''',
      #   secret = "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)[A-Z_]+?[\"\']''',
      #   secret = "{PLACEHOLDER}"
      #   secret = "%{PLACEHOLDER}"
      #   secret = "\%{PLACEHOLDER}"
      #   secret = "${PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      #   secret = "#{PLACEHOLDER}"
      #   secret = "\#{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](\\)?[\$%#]?\{.+?\}[\"\']''',
      #   secret = "Some...placeholder"
      #   secret = "Some***placeholder"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(\.\.\.|\*\*\*)[^\"\']*?[\"\']''',
      #   "secret="+some_var+"asdfa"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret = "(optional char)${PLACEHOLDER}(optional text)"
      #   secret = "(optional char)#{PLACEHOLDER}(optional text)"
      #   secret = "FOO_BAR=($|#){PLACEHOLDER}(optional text)"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']((?-i)[A-Z_]{6,})?(.)?[\$#]\{.{4,}?\}.*?[\"\']''',
      #   secret = "SOME_CONSTANT_PREFIX_${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}${PLACEHOLDER}"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}[\"\']''',
      #   secret = "$SOME_ENV_VARIABLE-optional-text"
      #   secret = "\$SOME_ENV_VARIABLE-optional-text"
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)(\\)?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?[\"\']''',
      # Known full placeholder passwords
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](ask|redhat)[\"\']''',
      # Base64 encoded EXAMPLE in the text
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(RVhBTVBMR|VYQU1QTEU|FWEFNUExF)[^\"\']*?[\"\']''',
      # aws.* is already covered by a different rule
      '''(?i)aws(.{0,15})(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']''',
      # jq lookups
      '''jq\s+([\w\-\s]+)?.*\.\w*(secret|password)(_|-)?(key)?''',
      # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?[\"\']''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?[\"\']''',
      ## Ends with
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?(key)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?[\"\']''',
      ## Contains
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(client(-)?secret)[^\'\"]*?[\"\']''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)(secret|password)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}[\"\']''',
    ]

[[rules]]
  description = "General Secret"
  regex = '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>([^\"\s]+?)<\/'''
  tags = ["alert:repo-owner", "key", "password", "general", "type:secret"]

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]
    regexes = [
      # Things like <password>$SOME_ENV_VARIABLE</password>
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?(?-i)\$[A-Z][0-9A-Z_]+(\]\]>)?<\/''',
      # Things like <password>${SOME_VARIABLE}</password>
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?\$\{.+?\}(\]\]>)?<\/''',
      # Things like <password>$SomeVariable$</password>
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?\$\w+?\$(\]\]>)?<\/''',
      # Things like <password>$(SOME_VARIABLE)</password>
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?\$\(.+?\)(\]\]>)?<\/''',
      # Things like <password>{SOME_VARIABLE}</password>
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?\{.+?\}(\]\]>)?<\/''',
      # Various words at the start and end that signify a placeholder
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?(&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?(\]\]>)?<\/''',
      '''(?i)<(\s+)?(\w+)?password([\s\w\"\'=]+)?>(<!\[CDATA\[)?[^<]+?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?(key)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?(\]\]>)?<\/''',
    ]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "4"

[[rules]]
  description = "General Secret"
  regex = '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>([^\"\s]+?)<\/'''
  tags = ["alert:repo-owner", "key", "secret", "general", "type:secret"]

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]
    regexes = [
      # Things like <secret>$SOME_ENV_VARIABLE</secret>
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?(?-i)\$[A-Z][0-9A-Z_]+(\]\]>)?<\/''',
      # Things like <secret>${SOME_VARIABLE}</secret>
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?\$\{.+?\}(\]\]>)?<\/''',
      # Things like <secret>$(SOME_VARIABLE)</secret>
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?\$\(.+?\)(\]\]>)?<\/''',
      # Things like <secret>{SOME_VARIABLE}</secret>
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?\{.+?\}(\]\]>)?<\/''',
      # Various words at the start and end that signify a placeholder
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?(&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?(\]\]>)?<\/''',
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?[^<]+?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?(key)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?(\]\]>)?<\/''',
      # UUIDs
      '''(?i)<(\s+)?(\w+)?secret([\s\w\"\'=]+)?>(<!\[CDATA\[)?(?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}(\]\]>)?<\/''',
    ]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "4"

[[rules]]
  description = "GitHub Fine-Grained Personal Access Token"
  regex = '''(github_pat_\w{82})'''
  tags = ["alert:repo-owner", "key", "github", "fine-grained", "access", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub Personal Access Token"
  regex = '''(ghp_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "personal", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub OAuth Access Token"
  regex = '''(gho_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "oauth", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub User to Server Token"
  regex = '''(ghu_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "user-to-server", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub Server to Server Token"
  regex = '''(ghs_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "server-to-server", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitHub Refresh Token"
  regex = '''(ghr_[0-9A-Za-z]{36,})'''
  tags = ["alert:repo-owner", "key", "github", "refresh", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitLab Access Token"
  regex = '''(glpat-[\w\-]{20})'''
  tags = ["alert:repo-owner", "key", "gitlab", "access", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitLab Pipeline Trigger Token"
  regex = '''(glptt-[0-9a-f]{40})'''
  tags = ["alert:repo-owner", "key", "gitlab", "pipeline", "trigger", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "GitLab Runner Registration Token"
  regex = '''((glrt-|GR1348941)[\w\-]{20})'''
  tags = ["alert:repo-owner", "key", "gitlab", "runner", "registration", "token", "type:secret"]

  [[rules.entropies]]
    Min = "2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "PayPal Braintree Access Token"
  regex = '''access_token\$production\$[0-9a-z]{16}\$[0-9a-f]{32}'''
  tags = ["alert:repo-owner", "key", "paypal", "type:secret"]

[[rules]]
  description = "Picatic API Key"
  regex = '''sk_live_[0-9a-z]{32}'''
  tags = ["alert:repo-owner", "key", "picatic", "type:secret"]

[[rules]]
  description = "PyPI Upload Token"
  regex = '''pypi-AgEIcHlwaS5vcmc[A-Za-z0-9-_]{50,1000}'''
  tags = ["alert:repo-owner", "key", "pypi", "type:secret"]

[[rules]]
  description = "SendGrid API Key"
  regex = '''[^\w]SG\.[\w\-]{16,32}\.[\w\-]{16,64}'''
  tags = ["alert:repo-owner", "key", "sendgrid", "type:secret"]

[[rules]]
  description = "Shopify Access Token"
  regex = '''shpat_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Shopify Custom App Access Token"
  regex = '''shpca_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Shopify Private App Access Token"
  regex = '''shppa_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Shopify Shared Secret"
  regex = '''shpss_[a-fA-F0-9]{32}'''
  tags = ["alert:repo-owner", "key", "shopify", "type:secret"]

[[rules]]
  description = "Slack Token"
  regex = '''xox[baprs]-([0-9a-zA-Z-]{10,48})?'''
  tags = ["alert:repo-owner", "key", "slack", "type:secret"]

  [rules.allowlist]
    regexes = [
      # Ignore placeholder values
      '''xox[baprs]-(1234|some|placeholder|slack)(.+)?''',
    ]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Slack Webhook"
  regex = '''https://hooks.slack.com/services/(T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8,12}/[a-zA-Z0-9_]{24})'''
  tags = ["alert:repo-owner", "key", "slack", "type:secret"]

  [[rules.entropies]]
    Min = "3.2"
    Max = "8"
    Group = "1"

[[rules]]
  description = "Square Access Token"
  regex = '''sq0atp-[0-9A-Za-z\-_]{22}'''
  tags = ["alert:repo-owner", "key", "square", "type:secret"]

[[rules]]
  description = "Square OAuth Secret"
  regex = '''sq0csp-[0-9A-Za-z\\-_]{43}'''
  tags = ["alert:repo-owner", "key", "square", "type:secret"]

[[rules]]
  description = "Stripe API Key"
  regex = '''(?i)stripe(.{0,20})?[sr]k_live_[0-9a-zA-Z]{24}'''
  tags = ["alert:repo-owner", "key", "stripe", "type:secret"]

[[rules]]
  description = "Twilio API Key"
  regex = '''(?i)twilio(.{0,20})?SK[0-9a-f]{32}'''
  tags = ["alert:repo-owner", "key", "twilio", "type:secret"]

[[rules]]
  description = "WP-Config"
  regex='''define(\s+)?\((\s+)?[\"\'](DB_HOST|DB_NAME|DB_USER|DB_PASSWORD|AUTH_KEY|SECURE_AUTH_KEY|LOGGED_IN_KEY|NONCE_KEY|AUTH_SALT|SECURE_AUTH_SALT|LOGGED_IN_SALT|NONCE_SALT)[\"\'](\s+)?,(\s+)?[\"\'](.+?)[\"\'](\s+)?\)'''
  tags = ["alert:repo-owner", "key", "credential", "wordpress", "type:secret"]

  [rules.allowlist]
    regexes = [
      '''define(\s+)?\((\s+)?[\"\'](.+?)[\"\'](\s+)?,(\s+)?[\"\']<.+?>[\"\'](\s+)?\)''',
      '''define(\s+)?\((\s+)?[\"\'](.+?)[\"\'](\s+)?,(\s+)?[\"\']\{\{.+?\}\}[\"\'](\s+)?\)''',
      '''define(\s+)?\((\s+)?[\"\'](.+?)[\"\'](\s+)?,(\s+)?[\"\']\$\{.+?\}[\"\'](\s+)?\)''',
      # Ignore some placeholder values
      '''define(\s+)?\((\s+)?[\"\'](.+?)[\"\'](\s+)?,(\s+)?[\"\']([^\'\"]+)?(-auth(entication)?|example(.com|key)?|here|localhost|pass(w)?or(d|t)|required|secret(s|_v\d)?(key)?|string|test)[\"\'](\s+)?\)''',
    ]

# Testing Patterns
#
# These patterns are the lowest presidence (i.e. 99-) because they could
# collide with other production patterns. Since secret leak uniquness is
# currently being determined by line (combined with some other attrs), these
# collisions were causing things to be missed. Putting them at the end should
# resolve that.
#
# The Structure of This File
#
# This file is broken into multiple sections. Each section starts with # [file:
# and the filename that the patterns in that section will go into once
# production ready.
#
# Tags
#
# All rules in this should have the group:leaktk-testing tag set and no alert:*
# tags set in addition to the other tags called out by the README.
#
# Promoting to Production
#
# The test patterns are deployed to the pattern server just like the other
# patterns. The leaktk-testing group and lack of alert tags put them in a sort
# of "test mode". The general process for making them production ready is:
#
# 1 Deploy the patterns
# 2 Wait 30 days
# 3 Review the scanner results during the monthly tuning
# 4 Tune the patterns
# 5 If there were too many false positives in the last 30 days, repeat 1-5
# 6 Move the test patterns to the file called out by their section
# 7 Remove the group:leatk-testing tag and add the appropriate alert tags
# 8 Repeat
#
# Note About Moving Patterns
#
# Try to keep patterns roughly alphabetically and/or grouped together. Or rather
# don't spread related patterns out. Spreading them out makes it harder to
# notice when changes need to be made in multiple places with related patterns.
#

# [file:98-general.toml]

[[rules]]
  # This should replace general secret if it doesn't add a lot of false positives
  # the difference here is that it just adds (access)? to the mix of things
  # it accepts
  description = "(Access) General Secret"
  # Things like:
  #   password = "value"
  #   password_key = "value"
  #   password-key = "value"
  #   secret = "value"
  #   secret = 'value'
  #   secret_key = "value"
  #   secret-key = "value"
  #   secretkey = "value"
  #   ...
  # "access" has been added as required here to avoid overlap with the other rule
  regex = '''(?i)(secret|password)(_|-)?access(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']'''
  # The tags removed the alert tag for testing
  tags = ["group:leaktk-testing", "key", "general", "secret", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "7" # NOTE: this will be group 8 when access is made optional

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)',
    ]

    regexes = [
      # Things like:
      #   secret = "asdfasdfas" # nosec (used by bandit)
      '''#(\s+)?nosec(\s+|$)''',
      #   secret = "asdfasdfas" # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
      #   secret = "asdfasdfas" //nolint:gosec
      '''\/\/(\s+)?nolint:gosec(\s+|$)''',
      #   secret = "_PLACEHOLDER_"
      #   secret = "<PLACEHOLDER>"
      #   secret = "@@PLACEHOLDER@@"
      #   secret = ").append("foo")
      #   secret = "%PLACEHOLDER%"
      #   secret = "$PLACEHOLDER$"
      #   secret = "`PLACEHOLDER`"
      #   secret = "[PLACEHOLDER]"
      #   secret = "[%PLACEHOLDER%]"
      #   secret = "$(PLACEHOLDER..."
      #   secret = "\$(PLACEHOLDER..."
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](_.+?_|<.+?>|@@.+?@@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|(\\)?\$\(.*)[\"\']''',
      #   secret = "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)[A-Z_]+?[\"\']''',
      #   secret = "{PLACEHOLDER}"
      #   secret = "%{PLACEHOLDER}"
      #   secret = "\%{PLACEHOLDER}"
      #   secret = "${PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      #   secret = "#{PLACEHOLDER}"
      #   secret = "\#{PLACEHOLDER}"
      #   secret = "\${PLACEHOLDER}"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](\\)?[\$%#]?\{.+?\}[\"\']''',
      #   secret = "Some...placeholder"
      #   secret = "Some***placeholder"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(\.\.\.|\*\*\*)[^\"\']*?[\"\']''',
      #   "secret="+some_var+"asdfa"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   secret = "(optional char)${PLACEHOLDER}(optional text)"
      #   secret = "(optional char)#{PLACEHOLDER}(optional text)"
      #   secret = "FOO_BAR=($|#){PLACEHOLDER}(optional text)"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']((?-i)[A-Z_]{6,})?(.)?[\$#]\{.{4,}?\}.*?[\"\']''',
      #   secret = "SOME_CONSTANT_PREFIX_${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}"
      #   secret = "/SOME/path:${PLACEHOLDER}${PLACEHOLDER}"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}[\"\']''',
      #   secret = "$SOME_ENV_VARIABLE-optional-text"
      #   secret = "\$SOME_ENV_VARIABLE-optional-text"
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)(\\)?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?[\"\']''',
      # Known full placeholder passwords
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](ask|redhat)[\"\']''',
      # Base64 encoded EXAMPLE in the text
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(RVhBTVBMR|VYQU1QTEU|FWEFNUExF)[^\"\']*?[\"\']''',
      # aws.* is already covered by a different rule
      '''(?i)aws(.{0,15})(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']''',
      # jq lookups
      '''jq\s+([\w\-\s]+)?.*\.\w*(secret|password)(_|-)?(access)?(_|-)?(key)?''',
      # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?[\"\']''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?[\"\']''',
      ## Ends with
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?(key)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?[\"\']''',
      ## Contains
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(client(-)?secret)[^\'\"]*?[\"\']''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)(secret|password)(_|-)?(access)?(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}[\"\']''',
    ]

[[rules]]
  # Find secrets where the file name is the context instead of contents
  # TODO: Remove (File) when prod ready
  description = "(File) General Secret"
  path='''(?i)\.[\w\-]*(secret|key|token|password)$'''
  # This will probably need to be tuned over time
  regex='''^([^\s]{5,})$'''
  # TODO: replace group:leaktk-testing with alert:repo-owner once tested
  tags = ["group:leaktk-testing", "type:secret", "general", "secret"]

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
    ]
    regexes = [
      # This is part of a PEM formated key header/footer
      '''-----''',
      # This is likely base64 data from a PEM formated key
      '''[0-9a-zA-Z\/=+]{64}''',
      # This is likely base64 data from a PEM formated key
      '''[0-9a-zA-Z\/=+]{16,62}==''',
    ]

  [[rules.entropies]]
    # Set to 0 for testing but will probably need to be 3.35 when set to production
    Min = "0"
    Max = "8"
    Group = "1"

[[rules]]
  # This is a copy of General Secret that looks for "token" instead.
  # When this rule is ready, merge it with the regluar General Secret.
  # This intentially just replaces (secret|password) with (token) so that
  # the merge will be (secret|password|token)
  # Note: Token specific ignore patterns will be added to the top of the regexes
  # and noted
  description = "(Token) General Secret"
  regex = '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']'''
  tags = ["group:leaktk-testing", "key", "general", "secret", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "6"

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
      # Usually a project not owned by the user that has a lot of FPs for us when
      # folks fork it. But make sure to include the azure-cli aro modules
      '''/azure-(cli.+\/command_modules\/([^a]|a[^r])|sdk-for-python\/|rest-api-specs\/|docs\/)''',

      # BEGIN TOKEN SPECIFIC IGNORE PATTERNS
      # This is often a github spec file that has example values in it
      '''\/github.json$''',
      # END TOKEN SPECIFIC IGNORE PATTERNS
    ]

    regexes = [
      # BEGIN TOKEN SPECIFIC IGNORE PATTERNS
      # Already covered by the Slack Token rule
      '''xox[baprs]-([0-9a-zA-Z-]{10,48})?''',
      # Already covered by GitHub rules
      '''gh(o|u|p|s|r)_[0-9A-Za-z]{36,}''',
      '''github_pat_\w{82}''',
      # Already covered byt GitLab rules
      '''glpat-[\w\-]{20}''',
      '''glptt-[0-9a-f]{40}''',
      '''(glrt-|GR1348941)[\w\-]{20}''',
      # END TOKEN SPECIFIC IGNORE PATTERNS

      # Things like:
      #   token = "asdfasdfas" # nosec (used by bandit)
      '''#(\s+)?nosec(\s+|$)''',
      #   token = "asdfasdfas" # noqa: E501
      '''#(\s+)?noqa(:[\s\w]+)?$''',
      #   token = "asdfasdfas" //nolint:gosec
      '''\/\/(\s+)?nolint:gosec(\s+|$)''',
      #   token = "_PLACEHOLDER_"
      #   token = "<PLACEHOLDER>"
      #   token = "@@PLACEHOLDER@@"
      #   token = ").append("foo")
      #   token = "%PLACEHOLDER%"
      #   token = "$PLACEHOLDER$"
      #   token = "`PLACEHOLDER`"
      #   token = "[PLACEHOLDER]"
      #   token = "[%PLACEHOLDER%]"
      #   token = "$(PLACEHOLDER..."
      #   token = "\$(PLACEHOLDER..."
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](_.+?_|<.+?>|@@.+?@@|\).+?\(|%.+?%|\$.+?\$|`.+?`|\[.+?\]|\[%.+?%\]|(\\)?\$\(.*)[\"\']''',
      #   token = "ALL_UPPER_LETTERS_OR_UNDERSCORES"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)[A-Z_]+?[\"\']''',
      #   token = "{PLACEHOLDER}"
      #   token = "%{PLACEHOLDER}"
      #   token = "\%{PLACEHOLDER}"
      #   token = "${PLACEHOLDER}"
      #   token = "\${PLACEHOLDER}"
      #   token = "#{PLACEHOLDER}"
      #   token = "\#{PLACEHOLDER}"
      #   token = "\${PLACEHOLDER}"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](\\)?[\$%#]?\{.+?\}[\"\']''',
      #   token = "Some...placeholder"
      #   token = "Some***placeholder"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(\.\.\.|\*\*\*)[^\"\']*?[\"\']''',
      #   "token="+some_var+"asdfa"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']\+.+?\+[\"\'].+?[\"\']''',
      #   token = "(optional char)${PLACEHOLDER}(optional text)"
      #   token = "(optional char)#{PLACEHOLDER}(optional text)"
      #   token = "FOO_BAR=($|#){PLACEHOLDER}(optional text)"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']((?-i)[A-Z_]{6,})?(.)?[\$#]\{.{4,}?\}.*?[\"\']''',
      #   token = "SOME_CONSTANT_PREFIX_${PLACEHOLDER}"
      #   token = "/SOME/path:${PLACEHOLDER}"
      #   token = "/SOME/path:${PLACEHOLDER}${PLACEHOLDER}"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}[\"\']''',
      #   token = "$SOME_ENV_VARIABLE-optional-text"
      #   token = "\$SOME_ENV_VARIABLE-optional-text"
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)(\\)?\$[A-Z][0-9A-Z_]{4,}[\w\-]*?[\"\']''',
      # Known full placeholder passwords
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](ask|redhat)[\"\']''',
      # Base64 encoded EXAMPLE in the text
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\"\']*?(RVhBTVBMR|VYQU1QTEU|FWEFNUExF)[^\"\']*?[\"\']''',
      # aws.* is already covered by a different rule
      '''(?i)aws(.{0,15})(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\']([^\"\s]+?)[\"\']''',
      # jq lookups
      '''jq\s+([\w\-\s]+)?.*\.\w*(token)(_|-)?(key)?''',
      # A common false positive for passwords and secrets (e.g. password = "update-your-postgres-pass-here")
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?[\"\']''',
      # Various words at the start and end that signify a placeholder
      ## Starts with
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](&lt;|\\u201c|\\u003c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_)(.+?)?[\"\']''',
      ## Ends with
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?(key)?|string|test|token|uuid|value|xxxxx|y(a)?ml)(&gt;|\\u003e)?[\"\']''',
      ## Contains
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'][^\'\"]*?(client(-)?secret)[^\'\"]*?[\"\']''',
      # Ignore things that look like UUIDs (So far these have more often referenced secrets rather than being them)
      '''(?i)(token)(_|-)?(key)?[\"\']?(\s+)?[:=](\s+)?[\"\'](?-i)[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}[\"\']''',
    ]

[[rules]]
  # This handles UNQUOTED values in YAML files (the other rules should be able
  # to handle quoted values).
  # Once this is production ready take off the "(YAML) bit so it gets sent with
  # other general secret matches.
  description="(YAML) General Secret"
  path='''\.y(a)?ml$'''
  regex = '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*([^\"\'\s]+?)\s*(#|$)'''
  tags = ["group:leaktk-testing", "yaml", "key", "secret", "general", "type:secret"]

  [[rules.entropies]]
    Min = "3.35"
    Max = "8"
    Group = "6"

  [rules.allowlist]
    paths = [
      # Test data files are often false positives
      '''(^|\/)testdata\/''',
    ]
    regexes = [
      # Things like:
      #   - secret: <PLACEHOLDER>
      #   - secret: @@PLACEHOLDER@@
      #   - secret: %PLACEHOLDER%
      #   - secret: $PLACEHOLDER$
      #   - secret: __PLACEHOLDER__
      #   - secret: _PLACEHOLDER_
      #   - secret: ALL_UPPER_LETTERS_OR_UNDERSCORS
      #   - secret: {PLACEHOLDER}
      #   - secret: ${PLACEHOLDER}
      #   - secret: %{PLACEHOLDER}
      #   - secret: update-your-postgres-pass-here # a common placeholder setup
      #   - secret: Some...placeholder
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(@@.+?@@|<.+?>|%.+?%|\$.+?\$|_.+?_|(?-i)[A-Z_]+?|(\$|%)?\{.+?\}|(?-i).+?[a-z]{2,}-[a-z]{2,}-[a-z]{2,}.+?|.*\.\.\..*)''',
      #   - secret: [%PLACEHOLDER%]"
      #   - secret: [PLACEHOLDER]
      #   - secret: $(PLACEHOLDER...
      #   - secret: \$(PLACEHOLDER...
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(\[%.+%\]|\[.+?\]|(\\)?\$\(.*)''',
      #   - secret: SOME_CONSTANT_PREFIX_${PLACEHOLDER}
      #   - secret: /SOME/path:${PLACEHOLDER}...
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*[a-z\-\_\/\:]{4,}\$\{[a-z\_\.\$\{\}]{4,}?\}''',
      #   - secret: $SOME_ENV_VARIABLE-optional-text
      #   - secret: \$SOME_ENV_VARIABLE-optional-text
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(?-i)(\\)?\$[A-Z][0-9A-Z_]{4,}([\w\-]+)?''',
      # Ignore EXAMPLE base64 encoded
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*.*?(RVhBTVBMR|VYQU1QTEU|FWEFNUExF).*?''',
      # Various words at the start and end that signify a placeholder
      # THESE WILL NEED TO BE UPDATED AFTER MOVING OVER TO MATCH THE OTHER LISTS
      ## Starts with
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*(&lt;|\\u201c|\$)?(\/etc\/|data\/|\/path\/|(\/var)?\/run\/|(0)?12345|abc(d|12)|admin|ansible|auto|bool:|capi-openstack|change|client|confirm|contrase|demo|dict|django-insecure-|example|(ENC\[|RU5DW|VOQ|FTk)|enter_|fake|false|file:|fixme|grub|http(s)?:\/\/|installation_prefix|invalid|libvirt|none|not|placeholder|pass(w)?(o|0)?(r)?(d|t)(!)?|provide|path|quickstart|replace|sample|(my)?secret|self|ssh|spec\.|str:|(my)?t(e)?mp|test|this|update|value|your_).*''',
      ## Ends with
      '''(?i)(secret|password|token)(_|-)?(access)?(_|-)?(key)?[\"\']?\s*:\s*.*(\.((jp(e)?g)|png|svg|txt|tmpl)|-auth(entication)?|-cert(ification)?(s)?|-demo|-encryption|(-|_)key|-tls|_id|_private|(0)?12345(6)?|client|(change|fix)me|conf(ig(uration)?)?|cred(ential)?(s)?|data|default|devel(opment)|example(.com|key)?|hash|here|json|(_|-)pwd|placeholder|pass((w)?(o|0)?(r)?(d|t)(\d*?)(!)?)?|principal|raw\(|registry|required|secret(s|_v\d)?|string|test|token|uuid|value|y(a)?ml)[\"\']?''',
    ]

[[rules]]
  # Might merge this with AWS Secret Key if the quality is good
  # (other rule|this new rule)
  description = "Potential AWS Secret Key"
  regex = '''(?i)[^a-z0-9\/+=\.\-<>_;]([a-z0-9\/+=]{40})([^a-z0-9\/+=\.\-<>_]|$)'''
  # Update alert tags and remove "testing" tag when ready
  # May set this up to never alert users directly but instead feed it
  # to a cred checker tool if we can't get a higher number of true positives.
  tags = ["group:leaktk-testing", "key", "aws", "type:secret"]

  [[rules.entropies]]
    # 4.4 also cuts out out a lot of FPs but might cut out some TPs as well
    # keep an eye on this range.
    Min = "4.2"
    Max = "8"
    Group = "1"

  [rules.allowlist]
    regexes = [
      # kind of a sanity check to cut down fps in the initial round of testing
      '''(?i)[^a-z0-9\/+=\.\-<>_;]([a-z]{40}|[a-z]{0,39}\d[a-z]{0,39})([^a-z0-9\/+=\.\-<>_]|$)''',
      # It must have at least 1 upper and lower case character
      '''[^A-Za-z0-9\/+=\.\-<>_;]([a-z0-9\/+=]{40}|[A-Z0-9\/+=]{40})([^a-z0-9\/+=\.\-<>_]|$)''',
      # Things then end in = often seem to be just base64 encoded values or keys not related to AWS
      '''[^A-Za-z0-9\/+=\.\-<>_;][A-Za-z0-9\/+=]{39}=([^A-Za-z0-9\/+=\.\-<>_]|$)''',
      # Ignore things with 3 or more slashes in it. So far most keys don't have this.
      # (This rule might be able to replace a lot of the other ones here, need to
      # go back and run this against older matches)
      '''(?i)[^a-z0-9\/+=\.\-<>_;](.+\/.+){3}([^a-z0-9\/+=\.\-<>_]|$)''',
      # Ignore placeholders
      # Note: this runs the risk of missing real keys if everything is one line and there's a match elsewhere
      # but it cuts out so many FPs it may be worth it.
      '''(?i)[^a-z0-9\/+=\.\-<>_;][a-z0-9\/+=]{0,40}(1234|abc(d|12)|algo|api|attr|auth|base|body|com|dist|example|exec|hook|ident|java|linux|name|org|param|path|repo|resp|share|spec|temp|test|type|xxx)[a-z0-9\/+=]{0,40}([^a-z0-9\/+=\.\-<>_]|$)'''
    ]


